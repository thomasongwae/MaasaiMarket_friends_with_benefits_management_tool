
package login_form;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author thomasongwae
 */
public final class DeletingAMemberFromDatabase extends javax.swing.JFrame {

    /**
     * Creates new form DeletingAMemberFromDatabase
     */
    public DeletingAMemberFromDatabase()
    {
        initComponents();
        changeTopCornerIcon();
        namesDisplayJlist1();
        DisplayNametoJlistComponents();
        
        UpdateToTheDatabaseLargeButtonKINGandQUEEN();
        
        
       
        
        namesDisplayJlist.addListSelectionListener(new ListSelectionListenerImpl());
               
        
        DisplayPicturetoTheFrame();
       
      
        
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        namesDisplayJlist = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        FullNamesMhere = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        idNumberMhere = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        MobileNumber = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        GenderHere = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        MonthsDataDisplay = new javax.swing.JTable();
        ImageDisplayHere = new javax.swing.JLabel();
        FinalDeleteButton = new javax.swing.JButton();
        UpdatingMemberButton = new javax.swing.JButton();
        AbortingButton = new javax.swing.JButton();
        MonthsSelectionButton = new javax.swing.JComboBox<>();
        UpdatePicture = new javax.swing.JButton();
        AddingPhoto = new javax.swing.JButton();
        GroupMPicture = new javax.swing.JLabel();
        justAnumber = new javax.swing.JLabel();
        number2 = new javax.swing.JLabel();
        PhotoRemoverButtonKing = new javax.swing.JButton();
        SearchButtonM = new javax.swing.JButton();
        MemberSearchField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Deleting and Updating Members");
        setMinimumSize(new java.awt.Dimension(1016, 590));
        setPreferredSize(new java.awt.Dimension(1016, 590));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Exit The Page");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 10, -1, -1));

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 13)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Members List ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 130, 30));

        jScrollPane1.setViewportView(namesDisplayJlist);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 280, 500));

        jLabel2.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 10, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Member Details");
        jLabel2.setToolTipText("");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 70, 170, -1));

        jLabel3.setText("Names");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 50, 30));
        getContentPane().add(FullNamesMhere, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 100, 350, 40));

        jLabel4.setText("Id Number");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 160, -1, -1));
        getContentPane().add(idNumberMhere, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 150, 350, 40));

        jLabel5.setText("Mobile");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 210, 60, 30));
        getContentPane().add(MobileNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 150, 40));

        jLabel6.setText("Gender");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 210, -1, -1));
        getContentPane().add(GenderHere, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 200, 120, 40));

        MonthsDataDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "date", "receiptno", "savingspaid", "loanadvance", "installemntpaid", "loanoutstanding", "signature"
            }
        ));
        MonthsDataDisplay.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(MonthsDataDisplay);
        MonthsDataDisplay.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 340, 540, 150));

        ImageDisplayHere.setText("                           Image Here");
        ImageDisplayHere.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        getContentPane().add(ImageDisplayHere, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 60, 250, 210));

        FinalDeleteButton.setText("Delete A Member");
        FinalDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FinalDeleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(FinalDeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 500, -1, -1));

        UpdatingMemberButton.setText("Update The Member Data");
        UpdatingMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatingMemberButtonActionPerformed(evt);
            }
        });
        getContentPane().add(UpdatingMemberButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 500, 200, 40));

        AbortingButton.setText("Refresh Now");
        AbortingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbortingButtonActionPerformed(evt);
            }
        });
        getContentPane().add(AbortingButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        MonthsSelectionButton.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January ", "February ", "March", "April ", "May ", "June", "July  ", "August ", "September", "October", "November", "December" }));
        MonthsSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MonthsSelectionButtonActionPerformed(evt);
            }
        });
        getContentPane().add(MonthsSelectionButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, 170, 40));

        UpdatePicture.setText("Update Photo");
        UpdatePicture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdatePictureActionPerformed(evt);
            }
        });
        getContentPane().add(UpdatePicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 280, 110, -1));

        AddingPhoto.setText("Add Photo");
        AddingPhoto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddingPhotoActionPerformed(evt);
            }
        });
        getContentPane().add(AddingPhoto, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 280, 130, 40));

        GroupMPicture.setText("       GroupPicture");
        getContentPane().add(GroupMPicture, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 340, 140, 140));

        justAnumber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        justAnumber.setText("NO");
        getContentPane().add(justAnumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 10, 70, 40));

        number2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        number2.setText("NO2");
        getContentPane().add(number2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 70, 40));

        PhotoRemoverButtonKing.setText("Remove Photo");
        PhotoRemoverButtonKing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PhotoRemoverButtonKingActionPerformed(evt);
            }
        });
        getContentPane().add(PhotoRemoverButtonKing, new org.netbeans.lib.awtextra.AbsoluteConstraints(616, 281, 120, 40));

        SearchButtonM.setText("Search");
        SearchButtonM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonMActionPerformed(evt);
            }
        });
        getContentPane().add(SearchButtonM, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));
        getContentPane().add(MemberSearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, 130, 40));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       ExitButton();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void MonthsSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MonthsSelectionButtonActionPerformed
        
        
        
         int i = MonthsSelectionButton.getSelectedIndex();
        
         DisplayNametoJlistComponents();
        
        
        
        
        
    }//GEN-LAST:event_MonthsSelectionButtonActionPerformed

    private void AddingPhotoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddingPhotoActionPerformed
        
        
        AddingPhotoToJlabel();
        
        
    }//GEN-LAST:event_AddingPhotoActionPerformed

    private void UpdatePictureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatePictureActionPerformed
       
       
            
            UpdatingThePhotoInTheDatabse();
            
       
        
        
    }//GEN-LAST:event_UpdatePictureActionPerformed

    private void PhotoRemoverButtonKingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PhotoRemoverButtonKingActionPerformed
       
        
        PhotoRemoverChucker();
        
    }//GEN-LAST:event_PhotoRemoverButtonKingActionPerformed

    private void FinalDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FinalDeleteButtonActionPerformed
       
        
        DeleteAmemberFromAdatabse();
        
        
    }//GEN-LAST:event_FinalDeleteButtonActionPerformed

    private void UpdatingMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdatingMemberButtonActionPerformed
        
        
        UpdateToTheDatabaseLargeButtonKINGandQUEEN();
        
    }//GEN-LAST:event_UpdatingMemberButtonActionPerformed

    private void AbortingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbortingButtonActionPerformed
        
        
         namesDisplayJlist1();
        
        
    }//GEN-LAST:event_AbortingButtonActionPerformed

    private void SearchButtonMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonMActionPerformed
        
        SearchButtonKingDom();
        
        
    }//GEN-LAST:event_SearchButtonMActionPerformed


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeletingAMemberFromDatabase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AbortingButton;
    private javax.swing.JButton AddingPhoto;
    private javax.swing.JButton FinalDeleteButton;
    private javax.swing.JTextField FullNamesMhere;
    private javax.swing.JTextField GenderHere;
    private javax.swing.JLabel GroupMPicture;
    private javax.swing.JLabel ImageDisplayHere;
    private javax.swing.JTextField MemberSearchField;
    private javax.swing.JTextField MobileNumber;
    private javax.swing.JTable MonthsDataDisplay;
    private javax.swing.JComboBox<String> MonthsSelectionButton;
    private javax.swing.JButton PhotoRemoverButtonKing;
    private javax.swing.JButton SearchButtonM;
    private javax.swing.JButton UpdatePicture;
    private javax.swing.JButton UpdatingMemberButton;
    private javax.swing.JTextField idNumberMhere;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel justAnumber;
    private javax.swing.JList<String> namesDisplayJlist;
    private javax.swing.JLabel number2;
    // End of variables declaration//GEN-END:variables
 //varible decration part
          File f = null;         
          String path = null; 
          byte[] pimage = null;
    
    
    
    
    
protected void changeTopCornerIcon()
        
{
     Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
     setIconImage(icon);
}

private void ExitButton()
        
{
    dispose();
}
private void DisplayPicturetoTheFrame()
{
      //display Image to a jlabel
        
        
      ImageIcon ii = new ImageIcon("/mnt/sda7/java_programming/login_form/src/login_form/Friends_drawing.png");
                          
     //Resize image to fit jlabel.
      Image img = ii.getImage().getScaledInstance(GroupMPicture.getWidth(), GroupMPicture.getHeight(), Image.SCALE_SMOOTH);
      
    //  System.out.println("Width == " +GroupMPicture.getWidth() + " Height == " + GroupMPicture.getHeight());
                             
      //display image on jpanel
      GroupMPicture.setIcon(new ImageIcon(img));
    
}








    //additing list selection listerner 
    public class ListSelectionListenerImpl implements ListSelectionListener 
    {

        public ListSelectionListenerImpl() {
        }

        @Override
        public void valueChanged(ListSelectionEvent e)
        {
            
            
            
          
            
            if (namesDisplayJlist.getValueIsAdjusting())
              {
                  
              DisplayNametoJlistComponents();
              
           
            }

        
       
        }
    
    }
    
    
    
    



protected void namesDisplayJlist1()
        
{
    
                Connection conn200 = null;
                Statement stmt200 = null;
                
                
                DefaultListModel model200 = new DefaultListModel();
                
                
                try
                {
                    Class.forName("org.sqlite.JDBC");
                    conn200 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                    
                    
                            stmt200 = conn200.createStatement();
              
                            String sql = "SELECT * FROM details";
                    
                    
                    
                      var result200 = stmt200.executeQuery(sql); 
                     
                     while (result200.next())
                        
                            {
                                    
                                      String setnames = result200.getString("names");  
                                      String setidnumber = result200.getString("idnumber"); 
                                      
                                      
                                      model200.addElement (setnames + "  ID " + setidnumber);
                                      
                                     
                                      namesDisplayJlist.setModel(model200);
                                      
                            }
                    
                                   
                                namesDisplayJlist.setSelectedIndex(1);                                
                                String selected1 = namesDisplayJlist.getSelectedValue();
                               // System.out.println(selected1);
                                
                                
                                
                                  
                                
                                 // getting number of elements in a jlist Display number of people in the jlist
                                      int np = namesDisplayJlist.getModel().getSize();
                                      String np1 =  Integer.toString(np);
                                      //System.out.println(np);
                                      
                                      int numberAuto1 = namesDisplayJlist.getSelectedIndex();
                                      String numberAuto = Integer.toString(numberAuto1);
                                      
                                      justAnumber.setText(np1);
                                      number2.setText(numberAuto);
                                
                     
                          //closing database connection        
                           result200.close();
                           stmt200.close();
                           conn200.close(); 
                    
                    
                    
                } 
                
                catch (ClassNotFoundException ex)
                
                
                {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) 
                {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
                
     
}



    

    
private void DisplayNametoJlistComponents()
        
        
{
    
   
    
                   String valuefromlist = namesDisplayJlist.getSelectedValue(); 
                
                           //getting the number from 0-9 only from the mix of alphabet and numbers
                       String numberfromlist = valuefromlist;
                       char[] chars = numberfromlist.toCharArray();
                             StringBuilder onlythenumber = new  StringBuilder();
                
                                 for (char c : chars)
                                          {
                                           if(Character.isDigit(c))
                                          {
                                             onlythenumber.append(c);
                                                  }
                                               }
                                 
                  // System.out.println("number from the jlist "+ onlythenumber);
    
    
                   
    
                //beating the Hell out
                Connection conn300 = null;
                 PreparedStatement stmt300 = null;
                
                
                
                try {
                    
                    Class.forName("org.sqlite.JDBC");
                    conn300 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                    
                     stmt300 = conn300.prepareStatement("SELECT * FROM details WHERE idnumber = ?");
                    
                     String SearchNo = onlythenumber.toString();
                     
                    stmt300.setString(1,SearchNo );
                     ResultSet rs = stmt300.executeQuery();
                    
                    
                    
                    
                   while (rs.next())
                    {
                        
                      
                       
                       
                        String setmobile = rs.getString("mobile");  
                        String setidnumber = rs.getString("idnumber");
                        String setgender = rs.getString("gender"); 
                        String setnames1 = rs.getString("names");
                        
                       
                        //changing the name to uppercase only and obvious it worked like fuck
                        String setnames5 = setnames1.toUpperCase();
                        
                          FullNamesMhere.setText(setnames5);
                          idNumberMhere.setText(setidnumber);
                          MobileNumber.setText(setmobile);
                          GenderHere.setText(setgender);
                                
                         
                          
                          
                           int numberAuto1 = namesDisplayJlist.getSelectedIndex();
                           String numberAuto = Integer.toString(numberAuto1);
                           number2.setText(numberAuto);
                                
                          
                          
                          
                        ImageDisplayHere.setIcon(null);
                        
                         ImageIcon format;
                         byte[] image = rs.getBytes("photo");
                              
                         //to check if the data fetched from the person photo is null or not
                            if(rs.wasNull())
                                
                                 {
                                 
                                     
                               ImageDisplayHere.setText("                       No image FOUND ! ");
                              // System.out.println("no photo found");
                               
                                 }
                           else
                            {
                               
                         format = new ImageIcon(image);
                         Image img = format.getImage();
                        Image newimage = img.getScaledInstance(ImageDisplayHere.getWidth(), ImageDisplayHere.getHeight(), Image.SCALE_SMOOTH);
                        ImageIcon images = new ImageIcon(newimage);
                        ImageDisplayHere.setIcon(images);
                         
                             }
                          
                          
                       int myindex = MonthsSelectionButton.getSelectedIndex();
                          //System.out.println(myindex);
                            
                            
                         DefaultTableModel model = (DefaultTableModel)MonthsDataDisplay.getModel();
                        
                         
                         
                    
                        switch (myindex)
                        {
                            case 0:
                                //jan getting data    January
                                // for the first row   first week
                                
                                String jan1firstrow1 = rs.getString("jan1date");
                                String jan1firstrow2 = rs.getString("jan1receiptno");
                                String jan1firstrow3 = rs.getString("jan1savingpaid");
                                String jan1firstrow4 = rs.getString("jan1loanadvance");
                                String jan1firstrow5 = rs.getString("jan1installment");
                                String jan1firstrow6 = rs.getString("jan1loanoutstanding");
                                String jan1firstrow7 = rs.getString("jan1signature");
                               
                                //JOptionPane.showMessageDialog(null,"date "+ jan1firstrow1 +"receiptno "+ jan1firstrow2);
                                //trying to get information to the jtable
                                model.setRowCount(0);
                                // model.addRow(new Object[] {jan1firstrow1,jan1firstrow2,jan1firstrow3 ,jan1firstrow4,jan1firstrow5,jan1firstrow6,jan1firstrow7} );
                                model.addRow(new Object[] {jan1firstrow1,jan1firstrow2,"Ksh "+jan1firstrow3 ,"Ksh "+jan1firstrow4,"Ksh "+jan1firstrow5,"Ksh "+jan1firstrow6,jan1firstrow7});
                                
                                //jan getting data
                                // for the second row   second week	      
                                String jan2firstrow1 = rs.getString("jan2date");
                                String jan2firstrow2 = rs.getString("jan2receiptno");
                                String jan2firstrow3 = rs.getString("jan2savingpaid");
                                String jan2firstrow4 = rs.getString("jan2loanadvance");
                                String jan2firstrow5 = rs.getString("jan2installment");
                                String jan2firstrow6 = rs.getString("jan2loanoutstanding");
                                String jan2firstrow7 = rs.getString("jan2signature");
                                model.addRow(new Object[] {jan2firstrow1,jan2firstrow2,"Ksh "+jan2firstrow3 ,"Ksh "+jan2firstrow4,"Ksh "+jan2firstrow5,"Ksh "+jan2firstrow6,jan2firstrow7} );
                                //jan getting data
                                // for the third row  third week
                                
                                String jan3firstrow1 = rs.getString("jan3date");
                                String jan3firstrow2 = rs.getString("jan3receiptno");
                                String jan3firstrow3 = rs.getString("jan3savingpaid");
                                String jan3firstrow4 = rs.getString("jan3loanadvance");
                                String jan3firstrow5 = rs.getString("jan3installment");
                                String jan3firstrow6 = rs.getString("jan3loanoutstanding");
                                String jan3firstrow7 = rs.getString("jan3signature");
                                model.addRow(new Object[] {jan3firstrow1,jan3firstrow2,"Ksh "+jan3firstrow3 ,"Ksh "+jan3firstrow4,"Ksh "+jan3firstrow5,"Ksh "+jan3firstrow6,jan3firstrow7} );
                                //jan getting data
                                // for the third row fourth week
                                
                                String jan4firstrow1 = rs.getString("jan4date");
                                String jan4firstrow2 = rs.getString("jan4receiptno");
                                String jan4firstrow3 = rs.getString("jan4savingpaid");
                                String jan4firstrow4 = rs.getString("jan4loanadvance");
                                String jan4firstrow5 = rs.getString("jan4installment");
                                String jan4firstrow6 = rs.getString("jan4loanoutstanding");
                                String jan4firstrow7 = rs.getString("jan4signature");
                                model.addRow(new Object[] {jan4firstrow1,jan4firstrow2,"Ksh "+jan4firstrow3 ,"Ksh "+jan4firstrow4,"Ksh "+jan4firstrow5,"Ksh "+jan4firstrow6,jan4firstrow7} );
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here
                                break;
                                
                                
                            case 1:
                                //Feb getting data    February
                                // for the first row   first week
                                String feb1firstrow1 = rs.getString("feb1date");
                                String feb1firstrow2 = rs.getString("feb1receiptno");
                                String feb1firstrow3 = rs.getString("feb1savingpaid");
                                String feb1firstrow4 = rs.getString("feb1loanadvance");
                                String feb1firstrow5 = rs.getString("feb1installment");
                                String feb1firstrow6 = rs.getString("feb1loanoutstanding");
                                String feb1firstrow7 = rs.getString("feb1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {feb1firstrow1,feb1firstrow2,"Ksh "+feb1firstrow3 ,"Ksh "+feb1firstrow4,"Ksh "+feb1firstrow5,"Ksh "+feb1firstrow6,feb1firstrow7});
                                // for the second row   second week
                                
                                String feb2firstrow1 = rs.getString("feb2date");
                                String feb2firstrow2 = rs.getString("feb2receiptno");
                                String feb2firstrow3 = rs.getString("feb2savingpaid");
                                String feb2firstrow4 = rs.getString("feb2loanadvance");
                                String feb2firstrow5 = rs.getString("feb2installment");
                                String feb2firstrow6 = rs.getString("feb2loanoutstanding");
                                String feb2firstrow7 = rs.getString("feb2signature");
                                model.addRow(new Object[] {feb2firstrow1,feb2firstrow2,"Ksh "+feb2firstrow3 ,"Ksh "+feb2firstrow4,"Ksh "+feb2firstrow5,"Ksh "+feb2firstrow6,feb2firstrow7});
                                // for the third row   third week
                                String feb3firstrow1 = rs.getString("feb3date");
                                String feb3firstrow2 = rs.getString("feb3receiptno");
                                String feb3firstrow3 = rs.getString("feb3savingpaid");
                                String feb3firstrow4 = rs.getString("feb3loanadvance");
                                String feb3firstrow5 = rs.getString("feb3installment");
                                String feb3firstrow6 = rs.getString("feb3loanoutstanding");
                                String feb3firstrow7 = rs.getString("feb3signature");
                                model.addRow(new Object[] {feb3firstrow1,feb3firstrow2,"Ksh "+feb3firstrow3 ,"Ksh "+feb3firstrow4,"Ksh "+feb3firstrow5,"Ksh "+feb3firstrow6,feb3firstrow7});
                                // for the fourt row   fourth week
                                String feb4firstrow1 = rs.getString("feb4date");
                                String feb4firstrow2 = rs.getString("feb4receiptno");
                                String feb4firstrow3 = rs.getString("feb4savingpaid");
                                String feb4firstrow4 = rs.getString("feb4loanadvance");
                                String feb4firstrow5 = rs.getString("feb4installment");
                                String feb4firstrow6 = rs.getString("feb4loanoutstanding");
                                String feb4firstrow7 = rs.getString("feb4signature");
                                model.addRow(new Object[] {feb4firstrow1,feb4firstrow2,"Ksh "+feb4firstrow3 ,"Ksh "+feb4firstrow4,"Ksh "+feb4firstrow5,"Ksh "+feb4firstrow6,feb4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //February ends here
                                break;
                                
                            case 2:
                                //Mar getting data    march
                                // for the first row   first week
                                String mar1firstrow1 = rs.getString("mar1date");
                                String mar1firstrow2 = rs.getString("mar1receiptno");
                                String mar1firstrow3 = rs.getString("mar1savingpaid");
                                String mar1firstrow4 = rs.getString("mar1loanadvance");
                                String mar1firstrow5 = rs.getString("mar1installment");
                                String mar1firstrow6 = rs.getString("mar1loanoutstanding");
                                String mar1firstrow7 = rs.getString("mar1signature");
                                model.setRowCount(0);
                                // model.addRow(new Object[] {jan1firstrow1,jan1firstrow2,jan1firstrow3 ,jan1firstrow4,jan1firstrow5,jan1firstrow6,jan1firstrow7} );
                                model.addRow(new Object[] {mar1firstrow1,mar1firstrow2,"Ksh "+mar1firstrow3 ,"Ksh "+mar1firstrow4 ,"Ksh "+mar1firstrow5,"Ksh "+mar1firstrow6,mar1firstrow7});
                                // for the second row   second week
                                
                                String mar2firstrow1 = rs.getString("mar2date");
                                String mar2firstrow2 = rs.getString("mar2receiptno");
                                String mar2firstrow3 = rs.getString("mar2savingpaid");
                                String mar2firstrow4 = rs.getString("mar2loanadvance");
                                String mar2firstrow5 = rs.getString("mar2installment");
                                String mar2firstrow6 = rs.getString("mar2loanoutstanding");
                                String mar2firstrow7 = rs.getString("mar2signature");
                                model.addRow(new Object[] {mar2firstrow1,mar2firstrow2,"Ksh "+mar2firstrow3 ,"Ksh "+mar2firstrow4 ,"Ksh "+mar2firstrow5,"Ksh "+mar2firstrow6,mar2firstrow7});
                                // for the third row   third week
                                String mar3firstrow1 = rs.getString("mar3date");
                                String mar3firstrow2 = rs.getString("mar3receiptno");
                                String mar3firstrow3 = rs.getString("mar3savingpaid");
                                String mar3firstrow4 = rs.getString("mar3loanadvance");
                                String mar3firstrow5 = rs.getString("mar3installment");
                                String mar3firstrow6 = rs.getString("mar3loanoutstanding");
                                String mar3firstrow7 = rs.getString("mar3signature");
                                model.addRow(new Object[] {mar3firstrow1,mar3firstrow2,"Ksh "+mar3firstrow3 ,"Ksh "+mar3firstrow4 ,"Ksh "+mar3firstrow5,"Ksh "+mar3firstrow6,mar3firstrow7});
                                // for the fourt row   fourth week
                                
                                String mar4firstrow1 = rs.getString("mar4date");
                                String mar4firstrow2 = rs.getString("mar4receiptno");
                                String mar4firstrow3 = rs.getString("mar4savingpaid");
                                String mar4firstrow4 = rs.getString("mar4loanadvance");
                                String mar4firstrow5 = rs.getString("mar4installment");
                                String mar4firstrow6 = rs.getString("mar4loanoutstanding");
                                String mar4firstrow7 = rs.getString("mar4signature");
                                model.addRow(new Object[] {mar4firstrow1,mar4firstrow2,"Ksh "+mar4firstrow3 ,"Ksh "+mar4firstrow4 ,"Ksh "+mar4firstrow5,"Ksh "+mar4firstrow6,mar4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here
                                break;
                            case 3:
                                
                                //Apr getting data    april
                                // for the first row   first week
                                String apr1firstrow1 = rs.getString("apr1date");
                                String apr1firstrow2 = rs.getString("apr1receiptno");
                                String apr1firstrow3 = rs.getString("apr1savingpaid");
                                String apr1firstrow4 = rs.getString("apr1loanadvance");
                                String apr1firstrow5 = rs.getString("apr1installment");
                                String apr1firstrow6 = rs.getString("apr1loanoutstanding");
                                String apr1firstrow7 = rs.getString("apr1signature");
                                model.setRowCount(0);
                                // model.addRow(new Object[] {jan1firstrow1,jan1firstrow2,jan1firstrow3 ,jan1firstrow4,jan1firstrow5,jan1firstrow6,jan1firstrow7} );
                                model.addRow(new Object[] {apr1firstrow1,apr1firstrow2,"Ksh "+apr1firstrow3 ,"Ksh "+apr1firstrow4 ,"Ksh "+apr1firstrow5,"Ksh "+apr1firstrow6,apr1firstrow7});
                                // for the second row   second week
                                
                                String apr2firstrow1 = rs.getString("apr2date");
                                String apr2firstrow2 = rs.getString("apr2receiptno");
                                String apr2firstrow3 = rs.getString("apr2savingpaid");
                                String apr2firstrow4 = rs.getString("apr2loanadvance");
                                String apr2firstrow5 = rs.getString("apr2installment");
                                String apr2firstrow6 = rs.getString("apr2loanoutstanding");
                                String apr2firstrow7 = rs.getString("apr2signature");
                                model.addRow(new Object[] {apr2firstrow1,apr2firstrow2,"Ksh "+apr2firstrow3 ,"Ksh "+apr2firstrow4 ,"Ksh "+apr2firstrow5,"Ksh "+apr2firstrow6,apr2firstrow7});
                                // for the third row   third week
                                String apr3firstrow1 = rs.getString("apr3date");
                                String apr3firstrow2 = rs.getString("apr3receiptno");
                                String apr3firstrow3 = rs.getString("apr3savingpaid");
                                String apr3firstrow4 = rs.getString("apr3loanadvance");
                                String apr3firstrow5 = rs.getString("apr3installment");
                                String apr3firstrow6 = rs.getString("apr3loanoutstanding");
                                String apr3firstrow7 = rs.getString("apr3signature");
                                model.addRow(new Object[] {apr3firstrow1,apr3firstrow2,"Ksh "+apr3firstrow3 ,"Ksh "+apr3firstrow4 ,"Ksh "+apr3firstrow5,"Ksh "+apr3firstrow6,apr3firstrow7});
                                // for the fourt row   fourth week
                                
                                String apr4firstrow1 = rs.getString("apr4date");
                                String apr4firstrow2 = rs.getString("apr4receiptno");
                                String apr4firstrow3 = rs.getString("apr4savingpaid");
                                String apr4firstrow4 = rs.getString("apr4loanadvance");
                                String apr4firstrow5 = rs.getString("apr4installment");
                                String apr4firstrow6 = rs.getString("apr4loanoutstanding");
                                String apr4firstrow7 = rs.getString("apr4signature");
                                model.addRow(new Object[] {apr4firstrow1,apr4firstrow2,"Ksh "+apr4firstrow3 ,"Ksh "+apr4firstrow4 ,"Ksh "+apr4firstrow5,"Ksh "+apr4firstrow6,apr4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here
                                break;
                                
                                
                            case 4:
                                //may getting data    may
                                // for the first row   first week
                                String may1firstrow1 = rs.getString("may1date");
                                String may1firstrow2 = rs.getString("may1receiptno");
                                String may1firstrow3 = rs.getString("may1savingpaid");
                                String may1firstrow4 = rs.getString("may1loanadvance");
                                String may1firstrow5 = rs.getString("may1installment");
                                String may1firstrow6 = rs.getString("may1loanoutstanding");
                                String may1firstrow7 = rs.getString("may1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {may1firstrow1,may1firstrow2,"Ksh "+may1firstrow3 ,"Ksh "+may1firstrow4 ,"Ksh "+may1firstrow5,"Ksh "+may1firstrow6,may1firstrow7});
                                // for the second row   second week
                                
                                String may2firstrow1 = rs.getString("may2date");
                                String may2firstrow2 = rs.getString("may2receiptno");
                                String may2firstrow3 = rs.getString("may2savingpaid");
                                String may2firstrow4 = rs.getString("may2loanadvance");
                                String may2firstrow5 = rs.getString("may2installment");
                                String may2firstrow6 = rs.getString("may2loanoutstanding");
                                String may2firstrow7 = rs.getString("may2signature");
                                model.addRow(new Object[] {may2firstrow1,may2firstrow2,"Ksh "+may2firstrow3 ,"Ksh "+may2firstrow4 ,"Ksh "+may2firstrow5,"Ksh "+may2firstrow6,may2firstrow7});
                                // for the third row   third week
                                String may3firstrow1 = rs.getString("may3date");
                                String may3firstrow2 = rs.getString("may3receiptno");
                                String may3firstrow3 = rs.getString("may3savingpaid");
                                String may3firstrow4 = rs.getString("may3loanadvance");
                                String may3firstrow5 = rs.getString("may3installment");
                                String may3firstrow6 = rs.getString("may3loanoutstanding");
                                String may3firstrow7 = rs.getString("may3signature");
                                model.addRow(new Object[] {may3firstrow1,may3firstrow2,"Ksh "+may3firstrow3 ,"Ksh "+may3firstrow4 ,"Ksh "+may3firstrow5,"Ksh "+may3firstrow6,may3firstrow7});
                                // for the fourt row   fourth week
                                
                                String may4firstrow1 = rs.getString("may4date");                                             	     
                                String may4firstrow2 = rs.getString("may4receiptno");
                                String may4firstrow3 = rs.getString("may4savingpaid");
                                String may4firstrow4 = rs.getString("may4loanadvance");
                                String may4firstrow5 = rs.getString("may4installment");
                                String may4firstrow6 = rs.getString("may4loanoutstanding");
                                String may4firstrow7 = rs.getString("may4signature");
                                model.addRow(new Object[] {may4firstrow1,may4firstrow2,"Ksh "+may4firstrow3 ,"Ksh "+may4firstrow4 ,"Ksh "+may4firstrow5,"Ksh "+may4firstrow6,may4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here
                                break;
                                
                                
                            case 5:
                                //jun getting data    jun
                                // for the first row   first week
                                String jun1firstrow1 = rs.getString("jun1date");
                                String jun1firstrow2 = rs.getString("jun1receiptno");
                                String jun1firstrow3 = rs.getString("jun1savingpaid");
                                String jun1firstrow4 = rs.getString("jun1loanadvance");
                                String jun1firstrow5 = rs.getString("jun1installment");
                                String jun1firstrow6 = rs.getString("jun1loanoutstanding");
                                String jun1firstrow7 = rs.getString("jun1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {jun1firstrow1,jun1firstrow2,"Ksh "+jun1firstrow3 ,"Ksh "+jun1firstrow4 ,"Ksh "+jun1firstrow5,"Ksh "+jun1firstrow6,jun1firstrow7});
                                // for the second row   second week
                                
                                String jun2firstrow1 = rs.getString("jun2date");
                                String jun2firstrow2 = rs.getString("jun2receiptno");
                                String jun2firstrow3 = rs.getString("jun2savingpaid");
                                String jun2firstrow4 = rs.getString("jun2loanadvance");
                                String jun2firstrow5 = rs.getString("jun2installment");
                                String jun2firstrow6 = rs.getString("jun2loanoutstanding");
                                String jun2firstrow7 = rs.getString("jun2signature");
                                model.addRow(new Object[] {jun2firstrow1,jun2firstrow2,"Ksh "+jun2firstrow3 ,"Ksh "+jun2firstrow4 ,"Ksh "+jun2firstrow5,"Ksh "+jun2firstrow6,jun2firstrow7});
                                // for the third row   third week
                                String jun3firstrow1 = rs.getString("jun3date");
                                String jun3firstrow2 = rs.getString("jun3receiptno");
                                String jun3firstrow3 = rs.getString("jun3savingpaid");
                                String jun3firstrow4 = rs.getString("jun3loanadvance");
                                String jun3firstrow5 = rs.getString("jun3installment");
                                String jun3firstrow6 = rs.getString("jun3loanoutstanding");
                                String jun3firstrow7 = rs.getString("jun3signature");
                                model.addRow(new Object[] {jun3firstrow1,jun3firstrow2,"Ksh "+jun3firstrow3 ,"Ksh "+jun3firstrow4 ,"Ksh "+jun3firstrow5,"Ksh "+jun3firstrow6,jun3firstrow7});
                                // for the fourt row   fourth week
                                
                                String jun4firstrow1 = rs.getString("jun4date");
                                String jun4firstrow2 = rs.getString("jun4receiptno");
                                String jun4firstrow3 = rs.getString("jun4savingpaid");
                                String jun4firstrow4 = rs.getString("jun4loanadvance");
                                String jun4firstrow5 = rs.getString("jun4installment");
                                String jun4firstrow6 = rs.getString("jun4loanoutstanding");
                                String jun4firstrow7 = rs.getString("jun4signature");
                                model.addRow(new Object[] {jun4firstrow1,jun4firstrow2,"Ksh "+jun4firstrow3 ,"Ksh "+jun4firstrow4 ,"Ksh "+jun4firstrow5,"Ksh "+jun4firstrow6,jun4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here  
                                break;
                                
                                
                            case 6:
                                //jul getting data    jul
                                // for the first row   first week
                                String jul1firstrow1 = rs.getString("jul1date");
                                String jul1firstrow2 = rs.getString("jul1receiptno");
                                String jul1firstrow3 = rs.getString("jul1savingpaid");
                                String jul1firstrow4 = rs.getString("jul1loanadvance");
                                String jul1firstrow5 = rs.getString("jul1installment");
                                String jul1firstrow6 = rs.getString("jul1loanoutstanding");
                                String jul1firstrow7 = rs.getString("jul1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {jul1firstrow1,jul1firstrow2,"Ksh "+jul1firstrow3 ,"Ksh "+jul1firstrow4 ,"Ksh "+jul1firstrow5,"Ksh "+jul1firstrow6,jul1firstrow7});
                                // for the second row   second week
                                
                                String jul2firstrow1 = rs.getString("jul2date");
                                String jul2firstrow2 = rs.getString("jul2receiptno");
                                String jul2firstrow3 = rs.getString("jul2savingpaid");
                                String jul2firstrow4 = rs.getString("jul2loanadvance");
                                String jul2firstrow5 = rs.getString("jul2installment");
                                String jul2firstrow6 = rs.getString("jul2loanoutstanding");
                                String jul2firstrow7 = rs.getString("jul2signature");
                                model.addRow(new Object[] {jul2firstrow1,jul2firstrow2,"Ksh "+jul2firstrow3 ,"Ksh "+jul2firstrow4 ,"Ksh "+jul2firstrow5,"Ksh "+jul2firstrow6,jul2firstrow7});
                                // for the third row   third week
                                String jul3firstrow1 = rs.getString("jul3date");
                                String jul3firstrow2 = rs.getString("jul3receiptno");
                                String jul3firstrow3 = rs.getString("jul3savingpaid");
                                String jul3firstrow4 = rs.getString("jul3loanadvance");
                                String jul3firstrow5 = rs.getString("jul3installment");
                                String jul3firstrow6 = rs.getString("jul3loanoutstanding");
                                String jul3firstrow7 = rs.getString("jul3signature");
                                model.addRow(new Object[] {jul3firstrow1,jul3firstrow2,"Ksh "+jul3firstrow3 ,"Ksh "+jul3firstrow4 ,"Ksh "+jul3firstrow5,"Ksh "+jul3firstrow6,jul3firstrow7});
                                // for the fourt row   fourth week
                                
                                String jul4firstrow1 = rs.getString("jul4date");
                                String jul4firstrow2 = rs.getString("jul4receiptno");
                                String jul4firstrow3 = rs.getString("jul4savingpaid");
                                String jul4firstrow4 = rs.getString("jul4loanadvance");
                                String jul4firstrow5 = rs.getString("jul4installment");
                                String jul4firstrow6 = rs.getString("jul4loanoutstanding");
                                String jul4firstrow7 = rs.getString("jul4signature");
                                model.addRow(new Object[] {jul4firstrow1,jul4firstrow2,"Ksh "+jul4firstrow3 ,"Ksh "+jul4firstrow4 ,"Ksh "+jul4firstrow5,"Ksh "+jul4firstrow6,jul4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here  
                                break;
                                
                                
                            case 7:
                                //aug getting data    augs
                                // for the first row   first week
                                String aug1firstrow1 = rs.getString("aug1date");
                                String aug1firstrow2 = rs.getString("aug1receiptno");
                                String aug1firstrow3 = rs.getString("aug1savingpaid");
                                String aug1firstrow4 = rs.getString("aug1loanadvance");
                                String aug1firstrow5 = rs.getString("aug1installment");
                                String aug1firstrow6 = rs.getString("aug1loanoutstanding");
                                String aug1firstrow7 = rs.getString("aug1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {aug1firstrow1,aug1firstrow2,"Ksh "+aug1firstrow3 ,"Ksh "+aug1firstrow4 ,"Ksh "+aug1firstrow5,"Ksh "+aug1firstrow6,aug1firstrow7});
                                // for the second row   second week
                                
                                String aug2firstrow1 = rs.getString("aug2date");
                                String aug2firstrow2 = rs.getString("aug2receiptno");
                                String aug2firstrow3 = rs.getString("aug2savingpaid");
                                String aug2firstrow4 = rs.getString("aug2loanadvance");
                                String aug2firstrow5 = rs.getString("aug2installment");
                                String aug2firstrow6 = rs.getString("aug2loanoutstanding");
                                String aug2firstrow7 = rs.getString("aug2signature");
                                model.addRow(new Object[] {aug2firstrow1,aug2firstrow2,"Ksh "+aug2firstrow3 ,"Ksh "+aug2firstrow4 ,"Ksh "+aug2firstrow5,"Ksh "+aug2firstrow6,aug2firstrow7});
                                // for the third row   third week
                                String aug3firstrow1 = rs.getString("aug3date");
                                String aug3firstrow2 = rs.getString("aug3receiptno");
                                String aug3firstrow3 = rs.getString("aug3savingpaid");
                                String aug3firstrow4 = rs.getString("aug3loanadvance");
                                String aug3firstrow5 = rs.getString("aug3installment");
                                String aug3firstrow6 = rs.getString("aug3loanoutstanding");
                                String aug3firstrow7 = rs.getString("aug3signature");
                                model.addRow(new Object[] {aug3firstrow1,aug3firstrow2,"Ksh "+aug3firstrow3 ,"Ksh "+aug3firstrow4 ,"Ksh "+aug3firstrow5,"Ksh "+aug3firstrow6,aug3firstrow7});
                                // for the fourt row   fourth week
                                
                                String aug4firstrow1 = rs.getString("aug4date");
                                String aug4firstrow2 = rs.getString("aug4receiptno");
                                String aug4firstrow3 = rs.getString("aug4savingpaid");
                                String aug4firstrow4 = rs.getString("aug4loanadvance");
                                String aug4firstrow5 = rs.getString("aug4installment");
                                String aug4firstrow6 = rs.getString("aug4loanoutstanding");
                                String aug4firstrow7 = rs.getString("aug4signature");
                                model.addRow(new Object[] {aug4firstrow1,aug4firstrow2,"Ksh "+aug4firstrow3 ,"Ksh "+aug4firstrow4 ,"Ksh "+aug4firstrow5,"Ksh "+aug4firstrow6,aug4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here  
                                break;
                                
                                
                            case 8:
                                //sep getting data    sepil
                                // for the first row   first week
                                String sep1firstrow1 = rs.getString("sep1date");
                                String sep1firstrow2 = rs.getString("sep1receiptno");
                                String sep1firstrow3 = rs.getString("sep1savingpaid");
                                String sep1firstrow4 = rs.getString("sep1loanadvance");
                                String sep1firstrow5 = rs.getString("sep1installment");
                                String sep1firstrow6 = rs.getString("sep1loanoutstanding");
                                String sep1firstrow7 = rs.getString("sep1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {sep1firstrow1,sep1firstrow2,"Ksh "+sep1firstrow3 ,"Ksh "+sep1firstrow4 ,"Ksh "+sep1firstrow5,"Ksh "+sep1firstrow6,sep1firstrow7});
                                // for the second row   second week
                                
                                String sep2firstrow1 = rs.getString("sep2date");
                                String sep2firstrow2 = rs.getString("sep2receiptno");
                                String sep2firstrow3 = rs.getString("sep2savingpaid");
                                String sep2firstrow4 = rs.getString("sep2loanadvance");
                                String sep2firstrow5 = rs.getString("sep2installment");
                                String sep2firstrow6 = rs.getString("sep2loanoutstanding");
                                String sep2firstrow7 = rs.getString("sep2signature");
                                model.addRow(new Object[] {sep2firstrow1,sep2firstrow2,"Ksh "+sep2firstrow3 ,"Ksh "+sep2firstrow4 ,"Ksh "+sep2firstrow5,"Ksh "+sep2firstrow6,sep2firstrow7});
                                // for the third row   third week
                                String sep3firstrow1 = rs.getString("sep3date");
                                String sep3firstrow2 = rs.getString("sep3receiptno");
                                String sep3firstrow3 = rs.getString("sep3savingpaid");
                                String sep3firstrow4 = rs.getString("sep3loanadvance");
                                String sep3firstrow5 = rs.getString("sep3installment");
                                String sep3firstrow6 = rs.getString("sep3loanoutstanding");
                                String sep3firstrow7 = rs.getString("sep3signature");
                                model.addRow(new Object[] {sep3firstrow1,sep3firstrow2,"Ksh "+sep3firstrow3 ,"Ksh "+sep3firstrow4 ,"Ksh "+sep3firstrow5,"Ksh "+sep3firstrow6,sep3firstrow7});
                                // for the fourt row   fourth week
                                
                                String sep4firstrow1 = rs.getString("sep4date");
                                String sep4firstrow2 = rs.getString("sep4receiptno");
                                String sep4firstrow3 = rs.getString("sep4savingpaid");
                                String sep4firstrow4 = rs.getString("sep4loanadvance");
                                String sep4firstrow5 = rs.getString("sep4installment");
                                String sep4firstrow6 = rs.getString("sep4loanoutstanding");
                                String sep4firstrow7 = rs.getString("sep4signature");
                                model.addRow(new Object[] {sep4firstrow1,sep4firstrow2,"Ksh "+sep4firstrow3 ,"Ksh "+sep4firstrow4 ,"Ksh "+sep4firstrow5,"Ksh "+sep4firstrow6,sep4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here  
                                break;
                                
                                
                            case 9:
                                //oct getting data    oct
                                // for the first row   first week
                                String oct1firstrow1 = rs.getString("oct1date");
                                String oct1firstrow2 = rs.getString("oct1receiptno");
                                String oct1firstrow3 = rs.getString("oct1savingpaid");
                                String oct1firstrow4 = rs.getString("oct1loanadvance");
                                String oct1firstrow5 = rs.getString("oct1installment");
                                String oct1firstrow6 = rs.getString("oct1loanoutstanding");
                                String oct1firstrow7 = rs.getString("oct1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {oct1firstrow1,oct1firstrow2,"Ksh "+oct1firstrow3 ,"Ksh "+oct1firstrow4 ,"Ksh "+oct1firstrow5,"Ksh "+oct1firstrow6,oct1firstrow7});
                                // for the second row   second week
                                
                                String oct2firstrow1 = rs.getString("oct2date");
                                String oct2firstrow2 = rs.getString("oct2receiptno");
                                String oct2firstrow3 = rs.getString("oct2savingpaid");
                                String oct2firstrow4 = rs.getString("oct2loanadvance");
                                String oct2firstrow5 = rs.getString("oct2installment");
                                String oct2firstrow6 = rs.getString("oct2loanoutstanding");
                                String oct2firstrow7 = rs.getString("oct2signature");
                                model.addRow(new Object[] {oct2firstrow1,oct2firstrow2,"Ksh "+oct2firstrow3 ,"Ksh "+oct2firstrow4 ,"Ksh "+oct2firstrow5,"Ksh "+oct2firstrow6,oct2firstrow7});
                                // for the third row   third week
                                String oct3firstrow1 = rs.getString("oct3date");
                                String oct3firstrow2 = rs.getString("oct3receiptno");
                                String oct3firstrow3 = rs.getString("oct3savingpaid");
                                String oct3firstrow4 = rs.getString("oct3loanadvance");
                                String oct3firstrow5 = rs.getString("oct3installment");
                                String oct3firstrow6 = rs.getString("oct3loanoutstanding");
                                String oct3firstrow7 = rs.getString("oct3signature");
                                model.addRow(new Object[] {oct3firstrow1,oct3firstrow2,"Ksh "+oct3firstrow3 ,"Ksh "+oct3firstrow4 ,"Ksh "+oct3firstrow5,"Ksh "+oct3firstrow6,oct3firstrow7});
                                // for the fourt row   fourth week
                                
                                String oct4firstrow1 = rs.getString("oct4date");
                                String oct4firstrow2 = rs.getString("oct4receiptno");
                                String oct4firstrow3 = rs.getString("oct4savingpaid");
                                String oct4firstrow4 = rs.getString("oct4loanadvance");
                                String oct4firstrow5 = rs.getString("oct4installment");
                                String oct4firstrow6 = rs.getString("oct4loanoutstanding");
                                String oct4firstrow7 = rs.getString("oct4signature");
                                model.addRow(new Object[] {oct4firstrow1,oct4firstrow2,"Ksh "+oct4firstrow3 ,"Ksh "+oct4firstrow4,"Ksh "+oct4firstrow5,"Ksh "+oct4firstrow6,oct4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here  
                                break;
                                
                            case 10:
                                //nov getting data    nov
                                // for the first row   first week
                                String nov1firstrow1 = rs.getString("nov1date");
                                String nov1firstrow2 = rs.getString("nov1receiptno");
                                String nov1firstrow3 = rs.getString("nov1savingpaid");
                                String nov1firstrow4 = rs.getString("nov1loanadvance");
                                String nov1firstrow5 = rs.getString("nov1installment");
                                String nov1firstrow6 = rs.getString("nov1loanoutstanding");
                                String nov1firstrow7 = rs.getString("nov1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {nov1firstrow1,nov1firstrow2,"Ksh "+nov1firstrow3 ,"Ksh "+nov1firstrow4 ,"Ksh "+nov1firstrow5,"Ksh "+nov1firstrow6,nov1firstrow7});
                                // for the second row   second week
                                
                                String nov2firstrow1 = rs.getString("nov2date");
                                String nov2firstrow2 = rs.getString("nov2receiptno");
                                String nov2firstrow3 = rs.getString("nov2savingpaid");
                                String nov2firstrow4 = rs.getString("nov2loanadvance");
                                String nov2firstrow5 = rs.getString("nov2installment");
                                String nov2firstrow6 = rs.getString("nov2loanoutstanding");
                                String nov2firstrow7 = rs.getString("nov2signature");
                                model.addRow(new Object[] {nov2firstrow1,nov2firstrow2,"Ksh "+nov2firstrow3 ,"Ksh "+nov2firstrow4 ,"Ksh "+nov2firstrow5,"Ksh "+nov2firstrow6,nov2firstrow7});
                                // for the third row   third week
                                String nov3firstrow1 = rs.getString("nov3date");
                                String nov3firstrow2 = rs.getString("nov3receiptno");
                                String nov3firstrow3 = rs.getString("nov3savingpaid");
                                String nov3firstrow4 = rs.getString("nov3loanadvance");
                                String nov3firstrow5 = rs.getString("nov3installment");
                                String nov3firstrow6 = rs.getString("nov3loanoutstanding");
                                String nov3firstrow7 = rs.getString("nov3signature");
                                model.addRow(new Object[] {nov3firstrow1,nov3firstrow2,"Ksh "+nov3firstrow3 ,"Ksh "+nov3firstrow4 ,"Ksh "+nov3firstrow5,"Ksh "+nov3firstrow6,nov3firstrow7});
                                // for the fourt row   fourth week
                                
                                String nov4firstrow1 = rs.getString("nov4date");
                                String nov4firstrow2 = rs.getString("nov4receiptno");
                                String nov4firstrow3 = rs.getString("nov4savingpaid");
                                String nov4firstrow4 = rs.getString("nov4loanadvance");
                                String nov4firstrow5 = rs.getString("nov4installment");
                                String nov4firstrow6 = rs.getString("nov4loanoutstanding");
                                String nov4firstrow7 = rs.getString("nov4signature");
                                model.addRow(new Object[] {nov4firstrow1,nov4firstrow2,"Ksh "+nov4firstrow3 ,"Ksh "+nov4firstrow4 ,"Ksh "+nov4firstrow5,"Ksh "+nov4firstrow6,nov4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                
                                //january ends here 
                                break;
                                
                            case 11:
                                //dec getting data    dec
                                // for the first row   first week
                                String dec1firstrow1 = rs.getString("dec1date");
                                String dec1firstrow2 = rs.getString("dec1receiptno");
                                String dec1firstrow3 = rs.getString("dec1savingpaid");
                                String dec1firstrow4 = rs.getString("dec1loanadvance");
                                String dec1firstrow5 = rs.getString("dec1installment");
                                String dec1firstrow6 = rs.getString("dec1loanoutstanding");
                                String dec1firstrow7 = rs.getString("dec1signature");
                                model.setRowCount(0);
                                model.addRow(new Object[] {dec1firstrow1,dec1firstrow2,"Ksh "+dec1firstrow3 ,"Ksh "+dec1firstrow4 ,"Ksh "+dec1firstrow5,"Ksh "+dec1firstrow6,dec1firstrow7});
                                // for the second row   second week
                                
                                String dec2firstrow1 = rs.getString("dec2date");
                                String dec2firstrow2 = rs.getString("dec2receiptno");
                                String dec2firstrow3 = rs.getString("dec2savingpaid");
                                String dec2firstrow4 = rs.getString("dec2loanadvance");
                                String dec2firstrow5 = rs.getString("dec2installment");
                                String dec2firstrow6 = rs.getString("dec2loanoutstanding");
                                String dec2firstrow7 = rs.getString("dec2signature");
                                model.addRow(new Object[] {dec2firstrow1,dec2firstrow2,"Ksh "+dec2firstrow3 ,"Ksh "+dec2firstrow4 ,"Ksh "+dec2firstrow5,"Ksh "+dec2firstrow6,dec2firstrow7});
                                // for the third row   third week
                                String dec3firstrow1 = rs.getString("dec3date");
                                String dec3firstrow2 = rs.getString("dec3receiptno");
                                String dec3firstrow3 = rs.getString("dec3savingpaid");
                                String dec3firstrow4 = rs.getString("dec3loanadvance");
                                String dec3firstrow5 = rs.getString("dec3installment");
                                String dec3firstrow6 = rs.getString("dec3loanoutstanding");
                                String dec3firstrow7 = rs.getString("dec3signature");
                                model.addRow(new Object[] {dec3firstrow1,dec3firstrow2,"Ksh "+dec3firstrow3 ,"Ksh "+dec3firstrow4 ,"Ksh "+dec3firstrow5,"Ksh "+dec3firstrow6,dec3firstrow7});
                                // for the fourt row   fourth week
                                
                                String dec4firstrow1 = rs.getString("dec4date");
                                String dec4firstrow2 = rs.getString("dec4receiptno");
                                String dec4firstrow3 = rs.getString("dec4savingpaid");
                                String dec4firstrow4 = rs.getString("dec4loanadvance");
                                String dec4firstrow5 = rs.getString("dec4installment");
                                String dec4firstrow6 = rs.getString("dec4loanoutstanding");
                                String dec4firstrow7 = rs.getString("dec4signature");
                                model.addRow(new Object[] {dec4firstrow1,dec4firstrow2,"Ksh "+dec4firstrow3 ,"Ksh "+dec4firstrow4 ,"Ksh "+dec4firstrow5,"Ksh "+dec4firstrow6,dec4firstrow7});
                                //added rows to count to six
                                model.addRow(new Object[] {} );
                                model.addRow(new Object[] {} );
                                break;
                                
                            default:
                                break;
                        }
                          
                          
                          
                          
                              
                          
                          
                    }  
                   
                   
                        
                            
                        //closing database connection        
                           rs.close();
                           stmt300.close();
                           conn300.close(); 
            }    
                
                catch (ClassNotFoundException ex)
                    
            {   
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } 
                catch (SQLException ex) 
                {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }   

   
    

}
private void  AddingPhotoToJlabel()
        
        
        
{
         
    
    
    
              
                     JFileChooser fileChooser = new JFileChooser();
                     
                      //Only search for images with these extensions.

                  FileNameExtensionFilter fnwf = new FileNameExtensionFilter("PNG JPG AND JPEG", "png", "jpeg", "jpg");
                     fileChooser.addChoosableFileFilter(fnwf);
                     int load = fileChooser.showOpenDialog(null);
                     
                     //If open button has being clicked.
                     if (load == fileChooser.APPROVE_OPTION) 
                          {
                           
                             f = fileChooser.getSelectedFile();
                             
                            path = f.getAbsolutePath();
                            
                          
                         // System.out.println(path);
                          ImageIcon ii = new ImageIcon(path);
                          
                          
                       Image img = ii.getImage().getScaledInstance(ImageDisplayHere.getWidth(), ImageDisplayHere.getHeight(), Image.SCALE_SMOOTH);
                             
                             
                             
                             
                             //display image on jpanel
                             ImageDisplayHere.setIcon(new ImageIcon(img));
                     
                             
                          }
                     
    
                     
}


private void  UpdatingThePhotoInTheDatabse()
{
    
    
    
                               JFrame frameThree = new JFrame();
       
        
                               //changing the jframe icon 
                               Image icon1 = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
                               frameThree.setIconImage(icon1);
        
                           //set default close option
        
                           int options = JOptionPane.showConfirmDialog(frameThree, "Do you want to UPdate the picture","Confirmation",JOptionPane.YES_NO_OPTION);
    
                        
    
    
    
    
    
    
    
                            if (options == JOptionPane.YES_OPTION)
                             
                            {
                             
                        //this part be used to insert picture into Database     
                                
                           if(path == null)
                                 {
                                     
                                     JFrame one1 = new JFrame();
                                     
                                //set the frame Icon to my customized ICON
                             Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/register_page_corner_drawing.png");
                             one1.setIconImage(icon);
                             JOptionPane.showMessageDialog(one1,"No Picture was Added");
                             
                             
                             
                                one1.dispose();
                                     
                                 }
                           
                                 
                           else 
                                 {
                                     
                                  AddImageToDatabaseNow();
                                    
                                 }  
                                 
                               frameThree.dispose();
                            }
                            if(options == JOptionPane.NO_OPTION)
                                
                            {
                                //System.out.println("");
                                frameThree.dispose();
                            }
                             
                            frameThree.dispose();
}
                             
                          
    
    


private  void PhotoRemoverChucker()


{
        
                                //Phot remover KING
                            
                            
                            
                               JFrame frameTwo = new JFrame();
       
        
                               //changing the jframe icon 
                               Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
                               frameTwo.setIconImage(icon);
        
                           //set default close option
        
                           int options = JOptionPane.showConfirmDialog(frameTwo, "You have decided to Remove the Picture","Confirmation",JOptionPane.YES_NO_OPTION);
                            
                            
                            
                            
                            if(options == JOptionPane.YES_OPTION)
                                 
                                     {
                                         
                              
                                 String string1 = "                        Photo Cleared";
                                 ImageDisplayHere.setIcon(null);
                                 ImageDisplayHere.setText(string1);           
                                         
                                         
                                         
                             //To understand where to insert the photo by using the Id Number
                                 String value1 = namesDisplayJlist.getSelectedValue();
                                 String numberfromlist = value1;
                                 char[] chars = numberfromlist.toCharArray();
                                 StringBuilder idnumber = new  StringBuilder();
                
                                 for (char c : chars)
                                          {
                                           if(Character.isDigit(c))
                                          {
                                             idnumber.append(c);
                                                  }
                                               }
                                 
                                 
                                 String nn = idnumber.toString();
                             
                                 //connect to the Database and store new Image
                                  Connection conn5 = null;
                                  PreparedStatement stmt5 = null;
                                 
                                 
                                       try {
                                           Class.forName("org.sqlite.JDBC");
                                           conn5 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                                           conn5.setAutoCommit(false);
                                           
                                           //String sql5 = "INSERT INTO details(photo) VALUES = ? WHERE idnumber = '"+ idnumber+"' ";
                                        //  String sql5 = "SELECT idnumber,photo FROM details WHERE idnumber = '"+idnumber+"'";
                                          String sql5 = "UPDATE details set photo = null WHERE idnumber = ?";
                                           
                                          
                                            stmt5=conn5.prepareStatement(sql5);
                   
                                            stmt5.setString(1,nn);
                                            
                                            stmt5.execute();
                
                                            conn5.commit();
                                            stmt5.close();
                                            conn5.close();
                                           
                                            
                                            frameTwo.dispose();
                                          
                                           
                                       } 
                                       catch (ClassNotFoundException | SQLException ex)
                                       {
                                           Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                       }
        
                                     }
                            
                            if (options == JOptionPane.NO_OPTION)
                            {
                                //System.out.println("Canceled");
                                frameTwo.dispose();
                            }
                            frameTwo.dispose();
                
}
        



protected void AddImageToDatabaseNow()
        
        
{
    
    
    
     
                                   File image=new File(path);
                             
                                  try
                                  {
                                      
                                      FileInputStream fis=new FileInputStream(image);
                                      ByteArrayOutputStream baos=new ByteArrayOutputStream();
                                      byte[] buf=new byte[1024];
                                      
                                      
                                      for(int readnum; (readnum=fis.read(buf)) !=-1;)
                                        {     
                                            
                                         baos.write(buf,0,readnum);     
                                         
                                        }
                                      
                                       pimage = baos.toByteArray();
                                       
                                       
                                       
                                       
                                       
                                       
                             
                             //To understand where to insert the photo by using the Id Number
                                 String value1 = namesDisplayJlist.getSelectedValue();
                                 String numberfromlist = value1;
                                 char[] chars = numberfromlist.toCharArray();
                                 StringBuilder idnumber = new  StringBuilder();
                
                                 for (char c : chars)
                                          {
                                           if(Character.isDigit(c))
                                          {
                                             idnumber.append(c);
                                                  }
                                               }
                                 
                                 
                                 String nn = idnumber.toString();
                             
                                 //connect to the Database and store new Image
                                  Connection conn5 = null;
                                  PreparedStatement stmt5 = null;
                                 
                                 
                                       try {
                                           Class.forName("org.sqlite.JDBC");
                                           conn5 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                                           conn5.setAutoCommit(false);
                                           
                                           //String sql5 = "INSERT INTO details(photo) VALUES = ? WHERE idnumber = '"+ idnumber+"' ";
                                        //  String sql5 = "SELECT idnumber,photo FROM details WHERE idnumber = '"+idnumber+"'";
                                          String sql5 = "UPDATE details set photo = ? WHERE idnumber = ?";
                                           
                                          
                                         
                                            stmt5=conn5.prepareStatement(sql5);
                   
                                            stmt5.setBytes(1, pimage);
                                            
                                            //idnumber
                                            
                                            stmt5.setString(2,nn);
                                            
                                            stmt5.execute();
                
                                            conn5.commit();
                                            stmt5.close();
                                            conn5.close();
                                           
                                          
                                           
                                       } 
                                       catch (ClassNotFoundException ex)
                                       {
                                           Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                       } catch (SQLException ex) {
                                           Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                       }
                                  
                                  
                                  
                                  
         
                                  }  
                                  catch (FileNotFoundException ex)
                                  
                                  {
                                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                  }  
                                  
                                  catch (IOException ex) 
                                  
                                  {
                                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                  } 
                                  
    
    
    
     }

   private void DeleteAmemberFromAdatabse()
 {
     
    
     
     
                               JFrame frameFour = new JFrame();
       
        
                               //changing the jframe icon 
                               Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
                               frameFour.setIconImage(icon);
        
                           //set default close option
        
                           int options = JOptionPane.showConfirmDialog(frameFour, "Confirm to Delete A Member","Confirmation",JOptionPane.YES_NO_OPTION);
                            

                            
                            if(options == JOptionPane.YES_OPTION)
                                 
                                     {
                                         
                                         
                                      
                                         Connection conn6 = null;
                                         PreparedStatement stmt6 = null;
                                         
                                   try {
                                       
                                       
                                  //To understand where to Delete Based on the Id Number
                                 String value1 = namesDisplayJlist.getSelectedValue();
                                 String numberfromlist = value1;
                                 char[] chars = numberfromlist.toCharArray();
                                 StringBuilder idnumber = new  StringBuilder();
                
                                 for (char c : chars)
                                          {
                                           if(Character.isDigit(c))
                                          {
                                             idnumber.append(c);
                                                  }
                                               }
                                 
                                 
                                    String nn = idnumber.toString();
                                    
                                    
                                       
                                        Class.forName("org.sqlite.JDBC");
                                         conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                                         conn6.setAutoCommit(false);
                                         
                                        
                                          String sql5 = "DELETE FROM details WHERE idnumber = ?";
                                           
                                          stmt6=conn6.prepareStatement(sql5);
                   
                                            //idnumber
                                            
                                            stmt6.setString(1,nn);
                                            stmt6.execute();
                                            conn6.commit();
                                            stmt6.close();
                                            conn6.close();
                                         
                                            
                                      //to refresh the page after deletion of the Member IT is stupid UNSAFE code but it Worked ANYWAY HAHAHAHA     
                                        changeTopCornerIcon();
                                        namesDisplayJlist1();
                                        DisplayNametoJlistComponents();
        
     
                                         
                                       
                                       
                                   } 
                                   catch (ClassNotFoundException ex) 
                                   {
                                       Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                   } catch (SQLException ex) {
                                       Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                                   }
                                          
                                          
                                       
                                         
                                         
                                         frameFour.dispose();
                                     }
     
     
     
 }
   
   protected void UpdateToTheDatabaseLargeButtonKINGandQUEEN()
           
           
           
   {
       
        
         //trying to enter data into the database
                 String valuefromlist = namesDisplayJlist.getSelectedValue(); 
                
                        //getting the number from 0-9 only from the mix of alphabet and numbers
                       String numberfromlist = valuefromlist;
                       char[] chars = numberfromlist.toCharArray();
                             StringBuilder idNumberFrom = new  StringBuilder();
                
                                 for (char c : chars)
                                          {
                                           if(Character.isDigit(c))
                                          {
                                              
                                             idNumberFrom.append(c);
                                             
                                           }
                                            }
                                     
       
        
       
         String FullNames =  FullNamesMhere.getText();
         String IdNumberGet = idNumberMhere.getText();
         String GetMobileNumber = MobileNumber.getText();
         String GetGenderNow = GenderHere.getText();
         
         
         
         
      //   MonthsSelectionButton
      //   MonthsDataDisplay
      
         var model2 = MonthsDataDisplay.getModel();
         
         //First Row From the JTable
         
          var R0C0 =   model2.getValueAt(0, 0);
          var R0C1 =   model2.getValueAt(0, 1);
          var R0C2 =   model2.getValueAt(0, 2);
          var R0C3 =   model2.getValueAt(0, 3);
          var R0C4 =   model2.getValueAt(0, 4);
          var R0C5 =   model2.getValueAt(0, 5);
          var R0C6 =   model2.getValueAt(0, 6);
          
          
          //Second Row From the JTable 
          
        var R1C0 =   model2.getValueAt(1, 0);
        var R1C1 =   model2.getValueAt(1, 1);
        var R1C2 =   model2.getValueAt(1, 2);
        var R1C3 =   model2.getValueAt(1, 3);
        var R1C4 =   model2.getValueAt(1, 4);
        var R1C5 =   model2.getValueAt(1, 5);
        var R1C6 =   model2.getValueAt(1, 6);  
          
         //Third Row From the JTable
         
        var R2C0 =   model2.getValueAt(2, 0);
        var R2C1 =   model2.getValueAt(2, 1);
        var R2C2 =   model2.getValueAt(2, 2);
        var R2C3 =   model2.getValueAt(2, 3);
        var R2C4 =   model2.getValueAt(2, 4);
        var R2C5 =   model2.getValueAt(2, 5);
        var R2C6 =   model2.getValueAt(2, 6);
        
        //Four Row From the JTable
        
        var R3C0 =   model2.getValueAt(3, 0);
        var R3C1 =   model2.getValueAt(3, 1);
        var R3C2 =   model2.getValueAt(3, 2);
        var R3C3 =   model2.getValueAt(3, 3);
        var R3C4 =   model2.getValueAt(3, 4);
        var R3C5 =   model2.getValueAt(3, 5);
        var R3C6 =   model2.getValueAt(3, 6);
        
        
            
        
        
        //Changing the object to String  
        //First Row
          String R0C0S =   String.valueOf(R0C0);
          String R0C1S =   String.valueOf(R0C1);
          
          String R0C2Sm =   String.valueOf(R0C2);
          String str = R0C2Sm ;
          String R0C2S = str.replaceAll("[^0-9]", "");
          
          String R0C3Sm =   String.valueOf(R0C3);
          String str1 = R0C3Sm ;
          String R0C3S = str1.replaceAll("[^0-9]", "");
          
          String R0C4Sm =   String.valueOf(R0C4);
          String str2 = R0C4Sm ;
          String R0C4S = str2.replaceAll("[^0-9]", "");
          
          String R0C5Sm =   String.valueOf(R0C5);
          String str3 = R0C5Sm ;
          String R0C5S = str3.replaceAll("[^0-9]", "");
          
          //special case
         // Officer 1 Officer 2 Officer 3 Officer 4 Officer 5
          String R0C6Sm =   String.valueOf(R0C6);
          String str4 = R0C6Sm ;
          String R0C6SA = str4.replaceAll("[^0-9]", "");
          String se = "Officer ";
          String  R0C6S = se.concat(R0C6SA);
          
          
          
        //Second Row  
          String R1C0S =   String.valueOf(R1C0);
          String R1C1S =   String.valueOf(R1C1);
          
          String R1C2Sm =   String.valueOf(R1C2);
          String str5 = R1C2Sm ;
          String R1C2S = str5.replaceAll("[^0-9]", "");
          
          String R1C3Sm =   String.valueOf(R1C3);
          String str6 = R1C3Sm ;
          String R1C3S = str6.replaceAll("[^0-9]", "");
          
          String R1C4Sm =   String.valueOf(R1C4);
          String str7 = R1C4Sm ;
          String R1C4S = str7.replaceAll("[^0-9]", "");
          
          String R1C5Sm =   String.valueOf(R1C5);
          String str8 = R1C5Sm ;
          String R1C5S = str8.replaceAll("[^0-9]", "");
          
          String R1C6Sm =   String.valueOf(R1C6);
          String str9 = R1C6Sm ;
          String R1C6SA = str9.replaceAll("[^0-9]", "");
          String se1 = "Officer ";
          String  R1C6S = se1.concat(R1C6SA);
        
          
          
        //Third Row
          String R2C0S =   String.valueOf(R2C0);
          String R2C1S =   String.valueOf(R2C1);
          
          String R2C2Sm =   String.valueOf(R2C2);
          String str12 = R2C2Sm ;
          String R2C2S = str12.replaceAll("[^0-9]", "");
          
          String R2C3Sm =   String.valueOf(R2C3);
          String str13 = R2C3Sm ;
          String R2C3S = str13.replaceAll("[^0-9]", "");
          
          String R2C4Sm =   String.valueOf(R2C4);
          String str14 = R2C4Sm ;
          String R2C4S = str14.replaceAll("[^0-9]", "");
          
          String R2C5Sm =   String.valueOf(R2C5);
          String str15 = R2C5Sm ;
          String R2C5S = str15.replaceAll("[^0-9]", "");
          
          String R2C6Sm =   String.valueOf(R2C6);
          String str10 = R2C6Sm ;
          String R2C6SA = str10.replaceAll("[^0-9]", "");
          String se2 = "Officer ";
          String  R2C6S = se2.concat(R2C6SA);
          
          
        //Four Row
          String R3C0S =   String.valueOf(R3C0);
          String R3C1S =   String.valueOf(R3C1);
          
          String R3C2Sm =   String.valueOf(R3C2);
          String str16 = R3C2Sm ;
          String R3C2S = str16.replaceAll("[^0-9]", "");
          
          String R3C3Sm =   String.valueOf(R3C3);
          String str17 = R3C3Sm ;
          String R3C3S = str17.replaceAll("[^0-9]", "");
          
          String R3C4Sm =   String.valueOf(R3C4);
          String str18 = R3C4Sm ;
          String R3C4S = str18.replaceAll("[^0-9]", "");
          
          String R3C5Sm =   String.valueOf(R3C5);
          String str19 = R3C5Sm ;
          String R3C5S = str19.replaceAll("[^0-9]", "");
          
          String R3C6Sm =   String.valueOf(R3C6);
          String str11 = R3C6Sm ;
          String R3C6SA = str11.replaceAll("[^0-9]", "");
          String se3 = "Officer ";
          String  R3C6S = se3.concat(R3C6SA);
          
          
          
          //January February March April May June July  August September October November December
          int mymonth = MonthsSelectionButton.getSelectedIndex();
          
          
          
          
           //idNumberFrom
           Connection conn9 = null;
           PreparedStatement stmt9 = null;
           
           
           Connection conn10 = null;
           PreparedStatement stmt10 = null;
                     
                     
          
           
           String idNumberFromOne = idNumberFrom.toString();
           
    
    if(mymonth == 0)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jan1date, jan1receiptno ,jan1savingpaid, jan1loanadvance ,jan1installment, jan1loanoutstanding ,jan1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                    
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (jan2date, jan2receiptno ,jan2savingpaid, jan2loanadvance ,jan2installment, jan2loanoutstanding ,jan2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jan3date, jan3receiptno ,jan3savingpaid, jan3loanadvance ,jan3installment, jan3loanoutstanding ,jan3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jan4date, jan4receiptno ,jan4savingpaid, jan4loanadvance ,jan4installment, jan4loanoutstanding ,jan4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }
        
    
      
          
          
        if(mymonth == 1)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (feb1date, feb1receiptno ,feb1savingpaid, feb1loanadvance ,feb1installment, feb1loanoutstanding ,feb1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (feb2date, feb2receiptno ,feb2savingpaid, feb2loanadvance ,feb2installment, feb2loanoutstanding ,feb2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (feb3date, feb3receiptno ,feb3savingpaid, feb3loanadvance ,feb3installment, feb3loanoutstanding ,feb3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (feb4date, feb4receiptno ,feb4savingpaid, feb4loanadvance ,feb4installment, feb4loanoutstanding ,feb4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }   
          
          
          
     
       if(mymonth == 2)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (mar1date, mar1receiptno ,mar1savingpaid, mar1loanadvance ,mar1installment, mar1loanoutstanding ,mar1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (mar2date, mar2receiptno ,mar2savingpaid, mar2loanadvance ,mar2installment, mar2loanoutstanding ,mar2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (mar3date, mar3receiptno ,mar3savingpaid, mar3loanadvance ,mar3installment, mar3loanoutstanding ,mar3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (mar4date, mar4receiptno ,mar4savingpaid, mar4loanadvance ,mar4installment, mar4loanoutstanding ,mar4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }        
          
          
          
          
      
       if(mymonth == 3)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (apr1date, apr1receiptno ,apr1savingpaid, apr1loanadvance ,apr1installment, apr1loanoutstanding ,apr1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (apr2date, apr2receiptno ,apr2savingpaid, apr2loanadvance ,apr2installment, apr2loanoutstanding ,apr2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (apr3date, apr3receiptno ,apr3savingpaid, apr3loanadvance ,apr3installment, apr3loanoutstanding ,apr3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (apr4date, apr4receiptno ,apr4savingpaid, apr4loanadvance ,apr4installment, apr4loanoutstanding ,apr4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }       
          
          
          
      
       if(mymonth == 4)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (may1date, may1receiptno ,may1savingpaid, may1loanadvance ,may1installment, may1loanoutstanding ,may1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (may2date, may2receiptno ,may2savingpaid, may2loanadvance ,may2installment, may2loanoutstanding ,may2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (may3date, may3receiptno ,may3savingpaid, may3loanadvance ,may3installment, may3loanoutstanding ,may3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (may4date, may4receiptno ,may4savingpaid, may4loanadvance ,may4installment, may4loanoutstanding ,may4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }       
          
       
       if(mymonth == 5)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jun1date, jun1receiptno ,jun1savingpaid, jun1loanadvance ,jun1installment, jun1loanoutstanding ,jun1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (jun2date, jun2receiptno ,jun2savingpaid, jun2loanadvance ,jun2installment, jun2loanoutstanding ,jun2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jun3date, jun3receiptno ,jun3savingpaid, jun3loanadvance ,jun3installment, jun3loanoutstanding ,jun3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jun4date, jun4receiptno ,jun4savingpaid, jun4loanadvance ,jun4installment, jun4loanoutstanding ,jun4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
       
        
       if(mymonth == 6)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jul1date, jul1receiptno ,jul1savingpaid, jul1loanadvance ,jul1installment, jul1loanoutstanding ,jul1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (jul2date, jul2receiptno ,jul2savingpaid, jul2loanadvance ,jul2installment, jul2loanoutstanding ,jul2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jul3date, jul3receiptno ,jul3savingpaid, jul3loanadvance ,jul3installment, jul3loanoutstanding ,jul3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (jul4date, jul4receiptno ,jul4savingpaid, jul4loanadvance ,jul4installment, jul4loanoutstanding ,jul4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
         
           
       if(mymonth == 7)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (aug1date, aug1receiptno ,aug1savingpaid, aug1loanadvance ,aug1installment, aug1loanoutstanding ,aug1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (aug2date, aug2receiptno ,aug2savingpaid, aug2loanadvance ,aug2installment, aug2loanoutstanding ,aug2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (aug3date, aug3receiptno ,aug3savingpaid, aug3loanadvance ,aug3installment, aug3loanoutstanding ,aug3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (aug4date, aug4receiptno ,aug4savingpaid, aug4loanadvance ,aug4installment, aug4loanoutstanding ,aug4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
        
       if(mymonth == 8)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (sep1date, sep1receiptno ,sep1savingpaid, sep1loanadvance ,sep1installment, sep1loanoutstanding ,sep1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (sep2date, sep2receiptno ,sep2savingpaid, sep2loanadvance ,sep2installment, sep2loanoutstanding ,sep2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (sep3date, sep3receiptno ,sep3savingpaid, sep3loanadvance ,sep3installment, sep3loanoutstanding ,sep3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (sep4date, sep4receiptno ,sep4savingpaid, sep4loanadvance ,sep4installment, sep4loanoutstanding ,sep4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
     
       
        
       if(mymonth == 9)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (oct1date, oct1receiptno ,oct1savingpaid, oct1loanadvance ,oct1installment, oct1loanoutstanding ,oct1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (oct2date, oct2receiptno ,oct2savingpaid, oct2loanadvance ,oct2installment, oct2loanoutstanding ,oct2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (oct3date, oct3receiptno ,oct3savingpaid, oct3loanadvance ,oct3installment, oct3loanoutstanding ,oct3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (oct4date, oct4receiptno ,oct4savingpaid, oct4loanadvance ,oct4installment, oct4loanoutstanding ,oct4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
       
     
       if(mymonth == 10)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (nov1date, nov1receiptno ,nov1savingpaid, nov1loanadvance ,nov1installment, nov1loanoutstanding ,nov1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (nov2date, nov2receiptno ,nov2savingpaid, nov2loanadvance ,nov2installment, nov2loanoutstanding ,nov2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (nov3date, nov3receiptno ,nov3savingpaid, nov3loanadvance ,nov3installment, nov3loanoutstanding ,nov3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (nov4date, nov4receiptno ,nov4savingpaid, nov4loanadvance ,nov4installment, nov4loanoutstanding ,nov4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
        
       if(mymonth == 11)       
    {
        
        //1
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (dec1date, dec1receiptno ,dec1savingpaid, dec1loanadvance ,dec1installment, dec1loanoutstanding ,dec1signature) = ('" +  R0C0S + "', '" + R0C1S + "','" + R0C2S + "','" + R0C3S + "','" + R0C4S + "','" + R0C5S + "','" +  R0C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
          
        
        //2
        
                   
                    
        
                     try {
                         Class.forName("org.sqlite.JDBC");
                         
                         conn10 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                          conn10.setAutoCommit(false);
                          String sql10 = ("UPDATE details  set (dec2date, dec2receiptno ,dec2savingpaid, dec2loanadvance ,dec2installment, dec2loanoutstanding ,dec2signature) = ('" +  R1C0S + "', '" + R1C1S + "','" + R1C2S + "','" + R1C3S + "','" + R1C4S + "','" + R1C5S + "','" +  R1C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                             stmt10   = conn10.prepareStatement(sql10);
                           stmt10.execute();
                           conn10.commit();
                         stmt10.close();
                         conn10.close();
                         
                         
                     } catch (ClassNotFoundException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } catch (SQLException ex) {
                         Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
                     } 
                     
                //3     
                     
                  
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (dec3date, dec3receiptno ,dec3savingpaid, dec3loanadvance ,dec3installment, dec3loanoutstanding ,dec3signature) = ('" +  R2C0S + "', '" + R2C1S + "','" + R2C2S + "','" + R2C3S + "','" + R2C4S + "','" + R2C5S + "','" +  R2C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //4
        
        
        try {
            
            
               Class.forName("org.sqlite.JDBC");
               conn9 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
               
               
               conn9.setAutoCommit(false);
              
               
               String sql9 = ("UPDATE details  set (dec4date, dec4receiptno ,dec4savingpaid, dec4loanadvance ,dec4installment, dec4loanoutstanding ,dec4signature) = ('" +  R3C0S + "', '" + R3C1S + "','" + R3C2S + "','" + R3C3S + "','" + R3C4S + "','" + R3C5S + "','" +  R3C6S  + "') WHERE idnumber = "+idNumberFromOne+"");
                                           
                stmt9   = conn9.prepareStatement(sql9);                            
                stmt9.execute();
                conn9.commit();
                stmt9.close();
                conn9.close();
                
               
               
               
               
             } 
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DeletingAMemberFromDatabase.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
    }  
       
       
   }
   
   
private void SearchButtonKingDom()
        
        
{
    
    
    
   // SearchButtonM
   // MemberSearchField      
    String IdnumberOrMobile = MemberSearchField.getText();
    
    
         if (IdnumberOrMobile.isEmpty() || IdnumberOrMobile.matches("^[a-zA-Z]+$"))
        
         {
              JOptionPane.showMessageDialog(null,IdnumberOrMobile + " Is not supported here please enter ID Number");
              
              
         }
       else
             
         {
             
                Connection conn50 = null;
                PreparedStatement stmt50 = null;
                
                Connection conn51 = null;
                PreparedStatement stmt51 = null;
                
                
                
                                
                
                
                try
                {
                    
                    Class.forName("org.sqlite.JDBC");
                    conn50 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
                    
                     stmt50 = conn50.prepareStatement("SELECT names, idnumber, mobile FROM details WHERE idnumber = ?");
                     stmt50.setString(1, IdnumberOrMobile);
                     ResultSet result10 = stmt50.executeQuery();
                      
                      
                     
                     
                     
                   
                     Class.forName("org.sqlite.JDBC");
                     conn51 = DriverManager.getConnection("jdbc:sqlite:login_form.db");   
                      
                     stmt51 = conn51.prepareStatement("SELECT names, idnumber, mobile FROM details WHERE mobile = ?");
                     stmt51.setString(1, IdnumberOrMobile);
                     ResultSet result11 = stmt51.executeQuery();
                         
                     
                     
                    
                    
                        
                        if (result10.next())
                        
                            {
                                     
                     
                                      String setnames = result10.getString("names");  // get the database column name
                                      String setmobile = result10.getString("mobile");  // get the database column name
                                      String setidnumber = result10.getString("idnumber"); 
                                      
                                      
                                     // System.out.println("Search names "+setnames+" "+setmobile+" "+setidnumber);
                                    
                                     
                                DefaultListModel model3 = (DefaultListModel)namesDisplayJlist.getModel();
                                model3.removeAllElements();
                                     
                                    
                                    
                                 model3.addElement (setnames + "          ID " + setidnumber);
                             
                                 namesDisplayJlist.setModel(model3);
                                 
                                 
                                 
                                 JList jList2 = (JList)namesDisplayJlist;
                                               
                           result10.close();
                           stmt50.close();
                           conn50.close(); 
                        
                                     
                                      
                     
                            }
                        
                     
                        
                else  if (result11.next())
                     {
                         
                     
                                      String setnames = result11.getString("names");  // get the database column name
                                      String setmobile = result11.getString("mobile");  // get the database column name
                                      String setidnumber = result11.getString("idnumber"); 
                                      
                                      
                                      
                                      
                                      
                                     
                                DefaultListModel model3 = (DefaultListModel)namesDisplayJlist.getModel();
                                model3.removeAllElements();
                                     
                                    
                                    
                                 model3.addElement (setnames + "          ID " + setidnumber);
                             
                                 namesDisplayJlist.setModel(model3);
                                 
                                 
                                 
                                 JList jList2 = (JList)namesDisplayJlist;
                                        
                                        
                                 
                               result11.close();
                               stmt51.close();
                               conn51.close(); 
                                      
                         
                     }
                        
                      
                        
                   else
                        {
                            
                            JOptionPane.showMessageDialog(null, "Not found");
                            namesDisplayJlist1();
                        }
                    
                    
                 } 
                
                catch (ClassNotFoundException ex) 
                
                 {
                   Logger.getLogger(home_page.class.getName()).log(Level.SEVERE, null, ex);
                
                 }
                
                   catch (SQLException ex) 
                       
                 {
                     
                Logger.getLogger(home_page.class.getName()).log(Level.SEVERE, null, ex);
                
                 }
                                      
                                     
         }
           
             
         }
    
    
    
    
    
    
    
}
            
 
