
package login_form;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author thomasongwae
 */
public class DisplayFullMemberNames extends javax.swing.JFrame {

    /**
     * Creates new form DisplayFullMemberNames
     */
    public DisplayFullMemberNames() {
        initComponents();
        
        iconadditiontoframeone();
        creatingplacetoholddata();
        readingfromthetabs();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jList6 = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jList5 = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList4 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        PrintButton = new javax.swing.JToggleButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Members List");
        setLocation(new java.awt.Point(0, 0));
        setMinimumSize(new java.awt.Dimension(759, 568));
        setPreferredSize(new java.awt.Dimension(759, 568));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Exit");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 490, 70, -1));

        jTabbedPane1.setFont(new java.awt.Font("Noto Sans", 1, 14)); // NOI18N

        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Full List", jPanel2);

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Names Only", jPanel3);

        jList6.setToolTipText("");
        jScrollPane6.setViewportView(jList6);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("From A - Z", jPanel4);

        jScrollPane5.setViewportView(jList5);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("From Z - A", jPanel5);

        jScrollPane3.setViewportView(jList3);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("With Phone No Only", jPanel6);

        jScrollPane4.setViewportView(jList4);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("With ID Number", jPanel7);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 660, 520));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("NO");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 40, 60, 50));

        PrintButton.setText("Print");
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PrintButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 60, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
      dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed
        
        printFromTotxtFile();
        
        
    }//GEN-LAST:event_PrintButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home_page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() 
            {
                new DisplayFullMemberNames().setVisible(true);
            }
        });
    }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton PrintButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JList<String> jList4;
    private javax.swing.JList<String> jList5;
    private javax.swing.JList<String> jList6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    protected void iconadditiontoframeone()
            
            
    {
        
        //set the frame Icon to my customized ICON
          Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
          setIconImage(icon);
          
          
    }
    
   private void creatingplacetoholddata()
           
   {
       
       //Adding a listener to the check when a tab is clicked
       
        jTabbedPane1.addChangeListener(new ChangeListener()
                
                
        {
            public void stateChanged(ChangeEvent e)
            {
                //System.out.println("" + jTabbedPane1.getSelectedIndex());
                
                readingfromthetabs();
                 
            }
            
        });
       
       
       
       
       
   }
    
   protected void  readingfromthetabs()
           
   {
       int tabsnumber = jTabbedPane1.getSelectedIndex();
       
       
       
       
        //to make the first tab to load Database Automatically when opened
        switch (tabsnumber) 
        
        {
            case 0:
                ReadFromDatabaseFullNames();
                break;
                
            case 1:
                ReadFromDatabaseNamesOnly();
                break;
                
            case 2:
                 ReadFromDatabaseAndSortAtoZ();
                break;
                
            case 3:
                 ReadFromDatabaseAndSortZtoA();
                break;
                
            case 4:
                ReadFromDatabaseNamesWithPhoneOnly();
                break;
                
            case 5:
                ReadFromDatabaseNamesWithIdNumber();
                break;
                
            default:
                break;
                
        }
       
      
       
   }

   
   private void  ReadFromDatabaseFullNames()
           
   {
       
       
       
       
       //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
            
           
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT id, names, idnumber,mobile , gender  FROM details";
              
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                          String id = result2.getString("id");   
                          String names = result2.getString("names");
                          String idnumber = result2.getString("idnumber");
                          String mobile = result2.getString("mobile");
                          String gender = result2.getString("gender");
                          
                                
                       
                         String names1 = names.toUpperCase();
                         model2.addElement (id +"     "+names1 + "          ID " + idnumber +"             "+mobile+"                       "+gender);
                            
                          
                       
                              
                                 
                                  
                         jList2.setModel(model2);
                                 
                                  
                         // // System.out.println("Successfully displayed");
                       
                                    
                 
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
             // System.out.println("closed connection");
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            
          int np2 =   jList2.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
           //System.out.println(np2);
                                      
            jLabel1.setText(np1);
       
       
       
   }
   
   
   private void ReadFromDatabaseNamesOnly()
           
   {
       
       //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
            
           
             
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT names FROM details";
              
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                            
                         String names = result2.getString("names");
                          
                          
                                
                         String names1 = names.toUpperCase();
                         model2.addElement ("  "+names1);
                            
                          
                       
                              
                                 
                                  
                         jList1.setModel(model2);
                                 
                                  
                         // // System.out.println("Successfully displayed");
                       
                                    
                 
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
             // System.out.println("closed connection");
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            jLabel1.setText("");
                    
                    
          int np2 =   jList1.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
           //System.out.println(np2);
                                      
            jLabel1.setText(np1);
       
       
   }
   
    private void ReadFromDatabaseNamesWithPhoneOnly()
            
    {
        
        //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
          
             
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT names, mobile FROM details";
              
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                            
                          String names = result2.getString("names");
                          String mobile = result2.getString("mobile");
                          
                          
                          
                                
                        String names1 = names.toUpperCase();
                         model2.addElement ("  "+names1 +"                     " +mobile);
                            
                          
                       
                              
                                 
                                  
                         jList3.setModel(model2);
                                 
                                  
                         // // System.out.println("Successfully displayed");
                       
                                    
                 
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
               // System.out.println("closed connection");
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            jLabel1.setText("");
                    
                    
          int np2 =   jList3.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
           //System.out.println(np2);
                                      
            jLabel1.setText(np1);
        
        
        
    }
    
    
    private void  ReadFromDatabaseNamesWithIdNumber()
            
            
    {
         //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement  stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
          
            
             
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT names, idnumber FROM details";
              
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                            
                          String names = result2.getString("names");
                          String idnumber = result2.getString("idnumber");
                          
                          
                          
                         String names1 = names.toUpperCase();       
                       
                         model2.addElement ("  "+names1 +"                       " +idnumber);
                            
                          
                       
                              
                                 
                                  
                         jList4.setModel(model2);
                                 
                                  
                         // // System.out.println("Successfully displayed");
                       
                                    
                 
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
               // System.out.println("closed connection");
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            jLabel1.setText("");
                    
                    
          int np2 =   jList3.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
          
                                      
            jLabel1.setText(np1);
        
        
        
        
    }
    private void ReadFromDatabaseAndSortAtoZ()
            
    {
        //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement  stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
            
             
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT names, idnumber, mobile FROM details";
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                            
                          String names = result2.getString("names");
                          String idnumber = result2.getString("idnumber");
                          String mobile = result2.getString("mobile");
                          
                          
                          
                         String names1 = names.toUpperCase();       
                       
                         model2.addElement ("  "+names1 +"                  " +"    "+mobile +"         "+idnumber);
                            
                          
                        
                                 
                         jList6.setModel(model2);
                                 
                                  
                         
                      
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
               // System.out.println("closed connection");
                
                
                
                
                //to sort Data on the jlist from A - Z
                ListModel model = jList6.getModel();
                String[] strings = new String[model2.getSize()];
                
                
                
                for(int i = 0 ; i < strings.length; i++)
                          {
                              
                            strings[i] = model2.getElementAt(i).toString();
                            
                            
                          }
                    
                
                Arrays.sort(strings);
                jList6.setListData(strings);
                
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            jLabel1.setText("");
                    
                    
          int np2 =   jList6.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
           //System.out.println(np2);
                                      
            jLabel1.setText(np1);
        
        
    }
    
    protected void  ReadFromDatabaseAndSortZtoA()
            
    {
        //sort form Z to A
        
        
        //connect to the database to pull data from it
       
        Connection conn6 = null;
        Statement  stmt6 = null;
        
        
        
        try 
        
        {
            
            
            Class.forName("org.sqlite.JDBC");
            
            conn6 = DriverManager.getConnection("jdbc:sqlite:login_form.db");
            
           // System.out.println("Connected to database successfully");
              
             
            // System.out.println("\nReading from a database");
            // conn.setAutoCommit(false);
            
             
              stmt6 = conn6.createStatement();
              
              String sql2 = "SELECT names, idnumber, mobile FROM details";
              
            
             var result2 = stmt6.executeQuery(sql2); 
             
             
             //creating a Jlist 
             DefaultListModel model2 = new DefaultListModel();   
             
             
             while(result2.next())
             {
                 
                            
                          String names = result2.getString("names");
                          String idnumber = result2.getString("idnumber");
                          String mobile = result2.getString("mobile");
                          
                          
                          
                         String names1 = names.toUpperCase();       
                       
                         model2.addElement ("  "+names1 +"                  " +"    "+mobile +"         "+idnumber);
                            
                          
                        
                                 
                         jList5.setModel(model2);
                                 
                                  
                         
                      
                 
             }
             
             
                //closing connection to the Database       
                result2.close();
                stmt6.close();
                conn6.close(); 
               // System.out.println("closed connection");
                
                
                
                
                //to sort Data on the jlist from A - Z
                ListModel model = jList5.getModel();
                String[] strings = new String[model2.getSize()];
                
                
                
                for(int i = 0 ; i < strings.length; i++)
                    
                          {
                              
                            strings[i] = model2.getElementAt(i).toString();
                            
                            
                          }
                    
                
             
               // Arrays.sort(strings);
               //sorting from Z to A
                Arrays.sort(strings, Collections.reverseOrder());
              // Collections.reverseOrder();
                jList5.setListData(strings);
                
            
            
        } 
        
        
        catch (ClassNotFoundException ex) 
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        } 
        catch (SQLException ex) 
        
        {
            Logger.getLogger(DisplayFullMemberNames.class.getName()).log(Level.SEVERE, null, ex);
        }
        
            jLabel1.setText("");
                    
                    
          int np2 =   jList6.getModel().getSize();
          
          String np1 =  Integer.toString(np2);
           //System.out.println(np2);
                                      
            jLabel1.setText(np1);

        
        
        
    }
    private void printFromTotxtFile()
            
            
    {
        //getting the current tap opened
        int tabsnumberOpened = jTabbedPane1.getSelectedIndex();
        
        
        
        switch (tabsnumberOpened) 
        
        {
            case 0:
                ReadFromDatabaseFullNamesPrint();
                break;
                
            case 1:
                ReadFromDatabaseNamesOnlyPrint();
                break;
                
            case 2:
                 ReadFromDatabaseAndSortAtoZPrint();
                break;
                
            case 3:
                 ReadFromDatabaseAndSortZtoAPrint();
                break;
                
            case 4:
                ReadFromDatabaseNamesWithPhoneOnlyPrint();
                break;
                
            case 5:
                ReadFromDatabaseNamesWithIdNumberPrint();
                break;
                
            default:
                break;
                
        }
        
        
        
        
    }
protected void ReadFromDatabaseFullNamesPrint()
{
    
    
    int sizeOfJlist =jList2.getModel().getSize();    
    StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList2.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Full_List_Name.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
}

protected void ReadFromDatabaseNamesOnlyPrint()
{
    
    int sizeOfJlist =jList1.getModel().getSize();    
    StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList1.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Names_Only.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
    
}
protected void ReadFromDatabaseAndSortAtoZPrint()
{
    int sizeOfJlist =jList6.getModel().getSize();    
    StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList6.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Names_A_to_Z.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
    
}

protected void ReadFromDatabaseAndSortZtoAPrint()
        
{
    int sizeOfJlist =jList5.getModel().getSize();    
    StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList5.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Names_Z_to_A.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
}

protected void ReadFromDatabaseNamesWithPhoneOnlyPrint()
        
        {
            
             int sizeOfJlist = jList3.getModel().getSize();    
             StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList3.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Names_With_Phone_Only.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
            
            
            
        }

protected void ReadFromDatabaseNamesWithIdNumberPrint()
        
{
    
        int sizeOfJlist = jList4.getModel().getSize();    
             StringBuilder allJlistItems = new StringBuilder();
    
         for(int i = 0; i < sizeOfJlist ; i++ )
         {
             allJlistItems.append("\n").append(jList4.getModel().getElementAt(i));
         }
     
       
         
     try
     {
         
      FileWriter myFileW = new FileWriter("Names_With_ID_Number.txt"); 
      
      var filen = allJlistItems.toString();
      myFileW.write(filen);
      myFileW.close();
      
      
      JFrame frame1 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame1.setIconImage(icon);
      
      JOptionPane.showMessageDialog(frame1, "Successfully wrote to the file");
      
      
      
     } 
     
     catch (IOException ex) 
     
     {
           JFrame frame2 = new JFrame();
      
      //set the frame Icon to my customized ICON
      Image icon = Toolkit.getDefaultToolkit().getImage("/mnt/sda7/java_programming/login_form/src/login_form/top_corner_drawing.png");
      frame2.setIconImage(icon);

         JOptionPane.showMessageDialog(frame2, "An Error occured ");
                   
     }
    
}


}

